//=============================================================================
//
// CSource FGD 
//
// Contains some of the more unique additions/ports that arent in base or halflife2.fgd
// and the multiplayer entities 
//=============================================================================

@include "base.fgd"
@include "halflife2.fgd"


//=============================================================================
// Brush Entities
//=============================================================================
// Mortar Field
@SolidClass base(Targetname, EnableDisable, Origin, Parentname) = func_mortar_field : "Mortar Field" 
[
	m_flSpread(float) : "Spread Radius" : 0 : "Spread of fire"
	m_flDelay(float) : "Fire Delay" : 1 : "How much delay there is in-between shells."
	m_iCount(integer) : "Repeat Count" : 4 : "Count of mortar shells"

	m_fControl(choices) : "Targeting" : 0 : "Random: will fire anywhere in bounds. "+
	"Above activator: will fire above or below entity activated the mortar. "+
	"X/Y Controller: position set by momentary_rot_buttons (tactical map)." =
	[
		0 : "Random"
		1 : "Above activator"
		2 : "X/Y Controller"
	]

	m_iszXController(target_destination) : "X Controller" : "" : "momentary_rot_button controlling X location"
	m_iszYController(target_destination) : "Y Controller" : "" : "momentary_rot_button controlling Y location"

	// Inputs
	input Trigger(void) : "Trigger"

	// Outputs
	output OnFire(void) : "Fires when the mortar field becomes active"
]

// Lightning Field (mortarfield without explosions)
// NOTENOTE; This is strictly for lightning strikes, from the sky - if you want an actual electric field,
// use a tesla
@SolidClass base(Targetname, EnableDisable, Origin, Parentname) = func_lightning_field : 
	"Lightning Field - Fires random lightning in the volume of the brush. The top of the brush will be the startpoint, and bottom endpoint." 
[
	m_flSpread(float) : "Amplitude" : 0 : "Amplitude of lightning"
	m_flDelay(float) : "Min Delay" : 0 : "Minimum delay there is in-between strikes."
	m_flMaxDelay(float) : "Max Delay" : 1 : "Maximum delay there is in-between strikes."
	m_iCount(integer) : "Repeat Count" : 1 : "Count of strikes"

	lightningtype(choices) : "Lightning Type" : "0" : "The charge of the lightning. Positive charged lightning strikes once and quickly fades, negative lightning strobes and instantly fades." =
	[
		0 : "Random"
		1 : "Positive"
		2 : "Negative"
	]

	// Inputs
	input Trigger(void) : "Trigger"

	// Outputs
	output OnFire(void) : "Fired when a lightning bolt is created."
]

@SolidClass base(Targetname, EnableDisable, Origin) = trigger_fall : 
	"Falling death trigger - will fade objects/non-living things, will kill living things on contact. Plays sounds/does special animations for players." 
[
	// Outputs
	output OnFallingObject(void) : "Fires when an object makes contact with this trigger."
]

// WIP; Stupid one-off Trigger for refinery level
@SolidClass base(Targetname, EnableDisable, Origin) = trigger_gunfire : 
	"Trigger that outputs when a weapon is fired in its volume. For gasleaks, and other such scenarios." 
[
	// Outputs
	output OnGunFired(void) : "Fires when somebody shoots a gun inside this trigger."
	output OnBulletPassed(void) : "Fires when a hitscan trace goes through this trigger."
]

@SolidClass base(Targetname, Parentname, Origin, EnableDisable) = trigger_secret :
	"A trigger volume that tells the player he got a secret. Can only be touched once."
[
	target(target_destination) : "Target" : : "Name of the target entity to +use on activation."
]

@SolidClass base(Targetname, Parentname, RenderFields, Global, Shadow, Origin) = func_fakedoor : 
	"A fake locked door. Plays a locked sound when used. Cheaper than real doors."
[
	locked_sound(sound) : "Locked Sound" : : "Sound played when the player tries to use the door, and fails because it's locked."

	// Outputs
	output OnLockedUse(void) : "Fired when the player uses the door, but it is locked."
]

@SolidClass base(Targetname, Angles, RenderFields, EnableDisable, Origin) = func_vehicle :
	"A drivable brush-based vehicle.\n" + 
	"NOTE: Build your vehicle so that the front is facing down the X axis."
[
	spawnflags(flags) =
	[
		1 : "No Pitch (X-rot)" : 0
		2 : "No User Control" : 0
		8 : "Passable" : 0
	]
	target(target_destination) : "First stop target"

	length(integer) : "Length of the vehicle" : 256
	width(integer) : "Width of the vehicle" : 128
	height(integer) : "Height above track" : 4

	health(integer) : "Health" : 100

//*
//*note: max speed is 2000 or things go wrong
//*
	speed(integer) : "Initial speed" : 0
	maxspeed(integer) : "Max Speed (units per second)" : 200
	velocitytype(choices) : "Change Velocity" : 0 : "The method through which this train changes its velocity as it moves along the path." =
	[
		0 : "Instantaneously"
		1 : "Linear blend"
		2 : "Ease in/ease out"
	]

	StartSound(string) : "Engine start sound" : ""
	StopSound(string) : "Engine stop sound" : ""
	MoveSound(string) : "Engine idle sound" : ""
	SkidSound(string) : "Skid sound" : ""
	volume(integer) : "Volume (10 = loudest)" : 10

	wheels(integer) : "Distance Between the Wheels" : 50 : "Used for turning and stopping."
	bank(integer) : "Bank Angle on Turns" : 0	// NEEDHELP

	dmg(integer) : "Damage on Crush" : 0 : "The amount of damage this train does to entities that block it."

	_minlight(string) : "Minimum Light Level" : : "The minimum level of ambient light that hits this brush."
]

@SolidClass base(Parentname,Global) = func_vehiclecontrols :
	"When used by the player, this entity overrides the player's controls to let them drive a vehicle."
[
	target(target_destination) : "Vehicle Name" : : "The target vehicle to control when the player uses these controls."
]


//=============================================================================
// Entities
//=============================================================================
// If the arty is offmap, this is where the flashes come from
@PointClass base(Targetname, Parentname) iconsprite("editor/info_target.vmt") sphere(radius) = info_offmap_mortar : "Mortar fire position"
[
]

// Logic entity that checks for skill level, otherwise identical to logic_relay
@PointClass base(Targetname) iconsprite("editor/logic_case.vmt") = logic_skill :
	"Checks the game's current skill, has outputs for both failing and succeeding the check. Typically used to check for hard/veryhard."
[
	devsprite(string) : "Sprite Name" : "editor/logic_case.vmt"	//TEMPSPRITE

	spawnflags(flags) =
	[
		1: "Remove on Use" : 0
	]

	skilllevel(choices) : "Skill Level to Check" : "0" : "Skill to check for." =
	[
		1 : "Easy"
		2 : "Normal"
		3 : "Hard"
		4 : "Very Hard"
		5 : "Hard OR Very Hard"	//Check for the upper difficulties
		6 : "Easy OR Normal"	//Check for the lower difficulties
	]

	// Inputs
	input CheckSkill(void) : "Check the Skill level"

	// Outputs
	output OnFailed(void) : "Fired when the check fails." 
	output OnSuccess(void) : "Fired when the check succeeds." 
]

@PointClass base(Targetname) sphere() iconsprite("editor/env_soundscape.vmt") = env_music : 
	"Entity used to control a dynamic music track. Up to 5 looping tracks can be selected. NOTE; They must all be the same format! No mixing wavs and mp3s!"
[
	health(integer) : "Volume" : 10 : "Sound volume, expressed as a range from 0 to 10, where 10 is the loudest."
	fadeinsecs(integer) : "Fade in time in seconds (0-10)" : 0	: "Fade-in time of the music"
	fadeoutsecs(integer) : "Fade out time in seconds (0-10)" : 0 : "Fade-out time of the music when stopped"
	overlap(float) : "Overlap Time" : "0.1" : "Amount of blending overlap between different loops (0-1)"

	spawnflags(flags) =
	[
	// Inheriting from ambient_generic...
	//	1: "Play everywhere" : 0	//UNUSED
		16: "Start Silent": 1
		32: "No Looping (mp3 music)": 0
		64: "Always start on first track" : 1
		128: "Half volume during important dialouge" : 1
	]

	music1(sound) : "Track 1" : "" : "Name of the 1st track to play. Also supports direct .wav filenames."
	music1weight(integer) : "Track 1 Weighting" : 100 : "How likely from 1-100 this track will play."

	music2(sound) : "Track 2" : "" : "Name of the 2nd track to play. Also supports direct .wav filenames."
	music2weight(integer) : "Track 2 Weighting" : 75 : "How likely from 1-100 this track will play."

	music3(sound) : "Track 3" : "" : "Name of the 3rd track to play. Also supports direct .wav filenames."
	music3weight(integer) : "Track 3 Weighting" : 50 : "How likely from 1-100 this track will play."

	music4(sound) : "Track 4" : "" : "Name of the 4th track to play. Also supports direct .wav filenames."
	music4weight(integer) : "Track 4 Weighting" : 25 : "How likely from 1-100 this track will play."

	music5(sound) : "Track 5" : "" : "Name of the 5th track to play. Also supports direct .wav filenames."
	music5weight(integer) : "Track 5 Weighting" : 25 : "How likely from 1-100 this track will play."

	// Inputs
	input ToggleSound(void) : "Toggles the sound between playing and stopping."
	input PlaySound(void) : "Starts the sound."
	input StopSound(void) : "Stops the sound if it is playing."

	// Outputs
	output OnNewTrack(void) : "Fired each time this music plays a new track."
]

@PointClass base(Item) studio("models/candybar.mdl") = item_candybar : "Candybar"
[
]

@PointClass base(Item) studio("models/dintymoore.mdl") = item_sandwich : "Dintymoore"
[
]

@PointClass base(Item) studio("models/mre.mdl") = item_hotmeal : "MRE"
[
]

@PointClass base(Item) studio("models/items/armourplate.mdl") = item_armourplate : "Big Armor Plate" []

//=============================================================================
// NPC's
//=============================================================================

@NPCClass base(BaseNPC,Parentname, TalkNPC, PlayerCompanion, Citizen) studio() = npc_rebel : "Rebel"
[
	citizentype(choices) : "Type" : "Rebel" =
	[
		4 : "Rebel"		// City rebels
		5 : "Unique"	
	]
]
@NPCClass base(BaseNPC,Parentname, TalkNPC, PlayerCompanion, Citizen) studio() = npc_worker : "Factory Worker"
[
	citizentype(choices) : "Type" : "Downtrodden" =
	[
		3 : "Downtrodden"	// City cits
		5 : "Unique"
	]
]
@NPCClass base(BaseNPC,Parentname, TalkNPC, PlayerCompanion, Citizen) studio() = npc_mobster : "Mobster"
[
	citizentype(choices) : "Type" : "Criminal" =
	[
		2 : "Criminal"	// Oldtown mob
		5 : "Unique"
	]
]
@NPCClass base(BaseNPC,Parentname, TalkNPC, PlayerCompanion, Citizen) studio() = npc_hobo : "Hobo"
[
	citizentype(choices) : "Type" : "Refugee" =
	[
		1 : "Refugee"	// Oldtown cits
		5 : "Unique"
	]
]

//-----------------------------------------------------------------------------
// Enemies
//-----------------------------------------------------------------------------
@NPCClass base(npc_metropolice) studio("models/Police.mdl") = npc_police : "Police"
[
	NumGrenades(choices) : "Grenades" : "5" =
	[
		"0" : "None"
		"1" : "1"
		"2" : "2"
		"3" : "3"
		"4" : "4"
		"5" : "5"
		"999999" : "Unlimited"
	]

	taser(Choices) : "Has a Taser" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]

	spawnflags(Flags) =
	[
		131072 : "Simple cops" : 0
		262144 : "Rappel (UNCHECK THIS IF IT IS CHECKED!)" : 0
	//	524288 : "Use Stun Grenades" : 0
		1048576 : "No Chatter" : 0
		2097152 : "Arrest Enemies" : 0
		4194304 : "No far stitching" : 0
		8388608 : "Prevent manhack toss" : 0
		16777216: "Allowed to respond to thrown objects" : 0
		33554432: "Mid-range attacks (halfway between normal + long-range)" : 0
	]
]

@NPCClass base(BaseCombine) studio("models/Combine_Soldier.mdl") = npc_grunt : "Grunt"
[
	input Assault(string) : "Start an assault. Parameter passed in should be the name of the rally point."

	model(choices) : "Model" : "models/combine_soldier.mdl" : "Regular Soldier" = 
	[
		"models/combine_soldier.mdl" : "Regular Soldier"
		"models/combine_soldier_camo.mdl" : "Desert Camo"
		"models/combine_squadleader.mdl" : "Squad Leader"
		"models/combine_squadleader_camo.mdl" : "Desert Squad Leader"
		"models/combine_grenadier.mdl" : "Grenadier/Shotgunner"
		"models/combine_elite.mdl" : "Fake Elite"
		"models/RiotPolice.mdl" : "Riot Police"
		"models/PigCop.mdl" : "Pig Cop"
	]

	tacticalvariant(choices) : "Tactical Variant" : "0" =
	[
		"0" : "Normal Tactics"
		"1" : "Aggressive Tactics"	// Super-aggressive "rush the player in a neat line" dumb AI
		"2" : "Aggressive Tactics until within 30ft, then normal"	// Same as above but only at longer range
		"3" : "Defend Position"		// Don't pursue the target at all
	]

	usemarch(choices) : "Walk Easy" : "0" : "When true, will use a variety of more casual walking animations instead of the standard walk. For use in crowds." =
	[
		"0" : "No"
		"1" : "Yes"
	]
]

@NPCClass base(BaseCombine) studio("models/Combine_Soldier.mdl") = npc_elite : "Elite"
[
	input Assault(string) : "Start an assault. Parameter passed in should be the name of the rally point."

	model(choices) : "Model" : "models/combine_elite.mdl" : "Regular Elite" = 
	[
		"models/combine_elite.mdl" : "Regular Elite"
		"models/combine_elite_paratrooper.mdl" : "Airborne Elite"
		"models/combine_sniper.mdl" : "Sniper Elite"
		"models/combine_elite_flamethrower.mdl" : "Flamethrower"
	]

	tacticalvariant(choices) : "Tactical Variant" : "0" =
	[
		"0" : "Normal Tactics"
		"1" : "Aggressive Tactics"	// Default "rush the player in a neat line" dumb AI
		"2" : "Aggressive Tactics until within 30ft, then normal"	// Same as above but only at longer range
		"3" : "Defend Position"		// Don't pursue the target at all
	]

	usemarch(choices) : "Walk Easy" : "0" : "When true, will use a variety of more casual walking animations instead of the standard walk. For use in crowds. " =
	[
		"0" : "No"
		"1" : "Yes"
	]
]

// Wolf/COD bonus level npc
@NPCClass base(TalkNPC, BaseNPC, PlayerCompanion) studio("models/Wehrmacht.mdl") = npc_german : "German"
[
	model(choices) : "Model" : "models/German_Wehrmacht.mdl" =
	[
		"models/German_Wehrmacht.mdl" : "Wehrmacht"
		"models/German_Engineer.mdl" : "Engineer"
		"models/German_Scientist.mdl" : "Scientist"
		"models/German_Paratrooper.mdl" : "SS Paratrooper"
	]

	additionalequipment(choices) : "Weapons" : "weapon_mp40" =
	[
		"weapon_mp40" : "MP40"
		"weapon_pistol" : "Luger"	//TODO; Need a luger
		"weapon_ar2" : "FG42"	//TODO; Need a FG42
		"weapon_sniperrifle" : "Kar98"	//TODO; Need a KAR
		"0" : "Nothing"
	]
	ammo(integer) : "Ammo" : 0 : "Ammo that this NPC starts with. 0 = Unlimited."

	NumGrenades(choices) : "Grenades" : "5" =
	[
		"0" : "None"
		"1" : "1"
		"2" : "2"
		"3" : "3"
		"4" : "4"
		"5" : "5"
		"999999" : "Unlimited"
	]
	
	ExpressionOverride(string) : "Facial expression override"
	input SetExpressionOverride(string) : "Set facial expression override"

	// Outputs
	output OnPlayerUse(void) : "Fires when a player +USEs Conscript"
]

//=============================================================================
// Weapons
//=============================================================================

@PointClass base(Weapon) studio("models/weapons/w_hmg1.mdl") = weapon_hmg1 : "BAR" []
@PointClass base(Weapon) studio("models/weapons/w_flamethrower.mdl") = weapon_flameprojector : "Flameprojector" []
@PointClass base(Weapon) studio("models/weapons/w_flamethrower.mdl") = weapon_flamethrower : "Flamethrower" []

@PointClass base(Weapon) studio("models/weapons/w_bat.mdl") = weapon_swing : "Swing weapon"
[
	weapontype(choices) : "Weapon type" : "0" =
	[
		"0" : "Random"
		"1" : "Bat"
		"2" : "Crowbar"
		"3" : "Pipe"
		"4" : "Hammer"
	]
]

@PointClass base(Weapon) studio("models/weapons/w_knife.mdl") = weapon_stab : "Stab weapon"
[
	weapontype(choices) : "Weapon type" : "0" =
	[
		"0" : "Random"
		"1" : "Bottle"
		"2" : "Knife"
		"3" : "Shank"
		"4" : "Rebar"
	]
]

@PointClass base(Targetname, Angles) studio("models/can.mdl") = item_sodacan :
	"Sodacan that can be used"
[
]


@PointClass base(Weapon) studio("models/weapons/w_smg2.mdl") = weapon_smg2 : "Carbine" []
//@PointClass base(Weapon) studio("models/weapons/w_crossbow.mdl") = weapon_scrapgun : "Scrapgun" []
@PointClass base(Weapon) studio("models/weapons/w_supershotgun.mdl") = weapon_supershotgun : "Auto-Shotgun" []
@PointClass base(Weapon) studio("models/weapons/w_molotov.mdl") = weapon_molotov : "Molotov" []
//@PointClass base(Weapon) studio("models/weapons/w_grenade.mdl") = weapon_smoke : "Gas Grenade" []
@PointClass base(Weapon) studio("models/weapons/w_concgrenade.mdl") = weapon_emp : "Stun Grenade" []
@PointClass base(Weapon) studio("models/weapons/w_rpg.mdl") = weapon_flash : "FLASH" []
@PointClass base(Weapon) studio("models/weapons/w_crossbow.mdl") = weapon_flashlight : "Flashlight" []
@PointClass base(Weapon) studio("models/weapons/w_44.mdl") = weapon_44 : "44 Magnum" []

// Actual live grenade entities
@PointClass base(Targetname, Angles, RenderFields, EnableDisable) studio("models/Weapons/w_grenade.mdl") = grenade_molotov : "Molotov"
[
]
@PointClass base(Targetname, Angles, RenderFields, EnableDisable) studio("models/Weapons/w_grenade.mdl") = grenade_frag : "Frag Grenade"
[
]
@PointClass base(Targetname, Angles, RenderFields, EnableDisable) studio("models/Weapons/w_grenade.mdl") = grenade_emp : "EMP Grenade"
[
]

//=============================================================================
// Multiplayer
//=============================================================================
@BaseClass = GameType
[
	GameType(choices) : "Game Type" : 0 : "Type of game this entity will be used for." =
	[
		0 : "Co-op/Singleplayer"
		1 : "Deathmatch"
		2 : "Team Deathmatch"
		3 : "Objective"
		4 : "Arena"
		5 : "Last Team Standing"
		6 : "Capture the Flag"
		7 : "Race"
	]
]

// TODO; No classes yet!
@BaseClass = ClassType
[
	ClassType(choices) : "Class Type" : 0 : "Type of class this spawnpoint will be used for." =
	[
		0 : "Soldier"
		1 : "Engineer"
		2 : "Medic"
		3 : "Covert Ops"
		4 : "Commander"
	]
]

//TODO;
//@PointClass base(prop_physics) studioprop() sphere(fademindist) sphere(fademaxdist) = prop_physics_respawnable :
//	"This class is the same as prop_physics, except it respawns after it breaks"
//[
//	RespawnTime(float) : "Respawn Time" : 60 : "Ammount in seconds this prop will respawn after it breaks."
//]

@PointClass base(ClassType, GameType, Angles, Targetname, EnableDisable) studio("models/editor/playerstart.mdl") = info_player_combine :
	"This entity indicates the position and facing direction at which the player will spawn during a deathmatch map. Any number of "+
	"info_player_deathmatch entities may be placed in a map."
[
]

@PointClass base(ClassType, GameType, Angles, Targetname, EnableDisable) studio("models/editor/playerstart.mdl") = info_player_rebel :
	"This entity indicates the position and facing direction at which the player will spawn during a deathmatch map. Any number of "+
	"info_player_deathmatch entities may be placed in a map."
[
]

// 3rd team for cheeky stuff, almost never used in normal games
@PointClass base(ClassType, Angles, Targetname, EnableDisable) studio("models/editor/playerstart.mdl") = info_player_pmc :
	"This entity indicates the position and facing direction at which the player will spawn during a deathmatch map. Any number of "+
	"info_player_deathmatch entities may be placed in a map."
[
]

@FilterClass base(BaseFilter) size(-8 -8 -8, 8 8 8) = filter_activator_team :
	"A filter that filters by the team of the activator."
[
	filterteam(choices) : "Filter Team Number" : 2 : 
		"The team number to filter by.  If the filter mode is Allow, only entities whose "+
		"team number matches the given team will pass the filter. If the filter mode is Disallow, "+
		"all entities EXCEPT those whose team number matches the given team will pass the filter." =
	[
	//	0 : "Unassigned"
		1 : "Spectator"
		2 : "Combine"
		3 : "Rebels"
		4 : "PMC"
	]
]
