//=============================================================================
//
// CSource FGD 
//
// Contains some of the more unique additions/ports that arent in base or halflife2.fgd
// and the multiplayer entities 
//=============================================================================

@include "base.fgd"
@include "halflife2.fgd"


//=============================================================================
// Brush Entities
//=============================================================================
// Mortar Field
@SolidClass base(Targetname, EnableDisable, Origin, Parentname) = func_mortar_field : "Mortar Field" 
[
	m_flSpread(float) : "Spread Radius" : 0 : "Spread of fire"
	m_flDelay(float) : "Fire Delay" : 1 : "How much delay there is in-between shells."
	m_iCount(integer) : "Repeat Count" : 4 : "Count of mortar shells"

	m_fControl(choices) : "Targeting" : 0 : "Random: will fire anywhere in bounds. "+
	"Above activator: will fire above or below entity activated the mortar. "+
	"X/Y Controller: position set by momentary_rot_buttons (tactical map)." =
	[
		0 : "Random"
		1 : "Above activator"
		2 : "X/Y Controller"
	]

	m_iszXController(target_destination) : "X Controller" : "" : "momentary_rot_button controlling X location"
	m_iszYController(target_destination) : "Y Controller" : "" : "momentary_rot_button controlling Y location"

	// Inputs
	input Trigger(void) : "Trigger"

	// Outputs
	output OnFire(void) : "Fires when the mortar field becomes active"
]

// Lightning Field (mortarfield without explosions)
// NOTENOTE; This is strictly for lightning strikes, from the sky - if you want an actual electric field,
// use a tesla
@SolidClass base(Targetname, EnableDisable, Origin, Parentname) = func_lightning_field : "Lightning Field" 
[
	m_flSpread(float) : "Spread Radius" : 0 : "Spread of lightning"
	m_flDelay(float) : "Fire Delay" : 1 : "How much delay there is in-between strikes."
	m_iCount(integer) : "Repeat Count" : 1 : "Count of strikes"

	// Inputs
	input Trigger(void) : "Trigger"

	// Outputs
	output OnFire(void) : "Fires when the lighting field becomes active"
]

//=============================================================================
// Entities
//=============================================================================
// If the arty is offmap, this is where the flashes come from
@PointClass base(Targetname, Parentname) iconsprite("editor/info_target.vmt") sphere(radius) = info_offmap_mortar : "Mortar fire position"
[
]

//=============================================================================
// NPC's
//=============================================================================

@NPCClass base(BaseNPC,Parentname, TalkNPC, PlayerCompanion, Citizen) studio() = npc_rebel : "Rebel"
[
]
@NPCClass base(BaseNPC,Parentname, TalkNPC, PlayerCompanion, Citizen) studio() = npc_worker : "Factory Worker"
[
]
@NPCClass base(BaseNPC,Parentname, TalkNPC, PlayerCompanion, Citizen) studio() = npc_mobster : "Mobster"
[
]
@NPCClass base(BaseNPC,Parentname, TalkNPC, PlayerCompanion, Citizen) studio() = npc_hobo : "Hobo"
[
]

//-----------------------------------------------------------------------------
// Enemies
//-----------------------------------------------------------------------------
@NPCClass base(BaseNPC,RappelNPC) studio("models/Police.mdl") = npc_police : "Police"
[
	additionalequipment(choices) : "Weapons" : "weapon_pistol" =
	[
		"weapon_stunstick"  : "Stun Stick"
		"weapon_swing"  : "Baton"
		"weapon_pistol" : "Pistol"
		"weapon_smg1"  : "SMG1"
		"weapon_shotgun"  : "Shotgun"
		"0"  : "Nothing"
	]

	manhacks(Choices) : "Number of Drones" : 0 =
	[
		0 : "None"
		1 : "1"
		2 : "2"
	]

	NumGrenades(choices) : "Number of Grenades" : "5" =
	[
		"0" : "None"
		"1" : "1"
		"2" : "2"
		"3" : "3"
		"4" : "4"
		"5" : "5"
		"999999" : "Unlimited"
	]

	taser(Choices) : "Has a Taser" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]

	weapondrawn(Choices) : "Pistol starts drawn" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]

	spawnflags(Flags) =
	[
		131072 : "Simple cops" : 0
		262144 : "Rappel (UNCHECK THIS IF IT IS CHECKED!)" : 0
	//	524288 : "Use Stun Grenades" : 0
		1048576 : "No Chatter" : 0
		2097152 : "Arrest Enemies" : 0
		4194304 : "No far stitching" : 0
		8388608 : "Prevent manhack toss" : 0
		16777216: "Allowed to respond to thrown objects" : 0
		33554432: "Mid-range attacks (halfway between normal + long-range)" : 0
	]
	  
	// Inputs
	input EnableManhackToss(void) : "Enables manhack toss (which had been disabled by the spawnflag)"
	input SetPoliceGoal(string) : "Causes the NPC to police the area defined by an ai_goal_police"
	input ActivateBaton(void) : "Set the baton to active"

	// Outputs
	output OnStunnedPlayer(void) : "Fires when the player is hit by a stunstick by this NPC."
	output OnCupCopped(void) : "Fires if the player hits me with the cupcop can. ONLY use for x360 achievement."
]

@NPCClass base(BaseCombine) studio("models/Combine_Soldier.mdl") = npc_grunt : "Grunt"
[
	input Assault(string) : "Start an assault. Parameter passed in should be the name of the rally point."

	model(choices) : "Model" : "models/combine_soldier.mdl" : "Regular Soldier" = 
	[
		"models/combine_soldier.mdl" : "Regular Soldier"
		"models/combine_soldier_city.mdl" : "Riot Police"
		"models/combine_soldier_airbase.mdl" : "Desert Camo"
		"models/combine_squad_leader.mdl" : "Squad Leader"
		"models/combine_squad_leader_airbase.mdl" : "Desert Squad Leader"
		"models/combine_grenadier.mdl" : "Grenadier"
		"models/combine_shocktrooper.mdl" : "Shotgunner"
		"models/combine_flamethrower.mdl" : "Flamethrower"
		"models/combine_elite.mdl" : "Fake Elite"
	]

	tacticalvariant(choices) : "Tactical Variant" : "0" =
	[
		"0" : "Normal Tactics"
		"1" : "Aggressive Tactics"	// Super-aggressive "rush the player in a neat line" dumb AI
		"2" : "Aggressive Tactics until within 30ft, then normal"	// Same as above but only at longer range
		"3" : "Defend Position"		// Don't pursue the target at all
	]

	usemarch(choices) : "Walk Easy" : "0" : "When true, will use a variety of more casual walking animations instead of the standard walk. For use in crowds." =
	[
		"0" : "No"
		"1" : "Yes"
	]
]

@NPCClass base(BaseCombine) studio("models/Combine_Soldier.mdl") = npc_elite : "Elite"
[
	input Assault(string) : "Start an assault. Parameter passed in should be the name of the rally point."

	model(choices) : "Model" : "models/combine_elite.mdl" : "Regular Elite" = 
	[
		"models/combine_elite.mdl" : "Regular Elite"
		"models/combine_paratrooper.mdl" : "Airborne Elite"
		"models/combine_sniper.mdl" : "Sniper Elite"
	]

	tacticalvariant(choices) : "Tactical Variant" : "0" =
	[
		"0" : "Normal Tactics"
		"1" : "Aggressive Tactics"	// Default "rush the player in a neat line" dumb AI
		"2" : "Aggressive Tactics until within 30ft, then normal"	// Same as above but only at longer range
		"3" : "Defend Position"		// Don't pursue the target at all
	]

	usemarch(choices) : "Walk Easy" : "0" : "When true, will use a variety of more casual walking animations instead of the standard walk. For use in crowds. " =
	[
		"0" : "No"
		"1" : "Yes"
	]
]

// Wolf/COD bonus level npc
@NPCClass base(TalkNPC, BaseNPC, PlayerCompanion) studio("models/Wehrmacht.mdl") = npc_german : "German"
[
	model(choices) : "Model" : "models/German_Wehrmacht.mdl" =
	[
		"models/German_Wehrmacht.mdl" : "Wehrmacht"
		"models/German_Engineer.mdl" : "Engineer"
		"models/German_Scientist.mdl" : "Scientist"
		"models/German_Paratrooper.mdl" : "SS Paratrooper"
	]

	additionalequipment(choices) : "Weapons" : "weapon_mp40" =
	[
		"weapon_mp40" : "MP40"
		"weapon_pistol" : "Pistol"	//TODO; Need a luger
		"weapon_ar2" : "AR2"	//TODO; Need a FG42
		"0" : "Nothing"
	]

	NumGrenades(choices) : "Number of Grenades" : "5" =
	[
		"0" : "None"
		"1" : "1"
		"2" : "2"
		"3" : "3"
		"4" : "4"
		"5" : "5"
		"999999" : "Unlimited"
	]
	
	ExpressionOverride(string) : "Facial expression override"
	input SetExpressionOverride(string) : "Set facial expression override"

	// Outputs
	output OnPlayerUse(void) : "Fires when a player +USEs Conscript"
]

//=============================================================================
// Weapons
//=============================================================================

@PointClass base(Weapon) studio("models/weapons/w_hmg1.mdl") = weapon_hmg1 : "MMG" []
@PointClass base(Weapon) studio("models/weapons/w_flamethrower.mdl") = weapon_flameprojector : "Flameprojector" []
@PointClass base(Weapon) studio("models/weapons/w_flamethrower.mdl") = weapon_flamethrower : "Flamethrower" []

@PointClass base(Weapon) studio("models/weapons/w_bat.mdl") = weapon_swing : "Swing weapon"
[
	weapontype(choices) : "Weapon type" : "0" =
	[
		"0" : "Random"
		"1" : "Bat"
		"2" : "Crowbar"
		"3" : "Pipe"
		"4" : "Hammer"
	]
]

@PointClass base(Weapon) studio("models/weapons/w_knife.mdl") = weapon_stab : "Stab weapon"
[
	weapontype(choices) : "Weapon type" : "0" =
	[
		"0" : "Random"
		"1" : "Bottle"
		"2" : "Knife"
		"3" : "Shank"
		"4" : "Rebar"
	]
]

@PointClass base(Targetname, Angles) studio("models/can.mdl") = item_sodacan :
	"Sodacan that can be used"
[
]


@PointClass base(Weapon) studio("models/weapons/w_smg2.mdl") = weapon_smg2 : "Carbine" []
//@PointClass base(Weapon) studio("models/weapons/w_crossbow.mdl") = weapon_scrapgun : "Scrapgun" []
@PointClass base(Weapon) studio("models/weapons/w_supershotgun.mdl") = weapon_supershotgun : "Auto-Shotgun" []
@PointClass base(Weapon) studio("models/weapons/w_molotov.mdl") = weapon_molotov : "Molotov" []
//@PointClass base(Weapon) studio("models/weapons/w_grenade.mdl") = weapon_smoke : "Gas Grenade" []
@PointClass base(Weapon) studio("models/weapons/w_concgrenade.mdl") = weapon_emp : "Stun Grenade" []
@PointClass base(Weapon) studio("models/weapons/w_rpg.mdl") = weapon_flash : "FLASH" []
@PointClass base(Weapon) studio("models/weapons/w_crossbow.mdl") = weapon_flashlight : "Flashlight" []
@PointClass base(Weapon) studio("models/weapons/w_45.mdl") = weapon_45 : "45-70" []


//=============================================================================
// Multiplayer
//=============================================================================
@BaseClass = GameType
[
	GameType(choices) : "Game Type" : 0 : "Type of game this entity will be used for." =
	[
		0 : "Co-op"
		1 : "Deathmatch"
		2 : "Team Deathmatch"
		3 : "Objective"
		4 : "Arena"
		5 : "Last Team Standing"
		6 : "Capture the Flag"
		7 : "Race"
	]
]

// TODO; No classes yet!
@BaseClass = ClassType
[
	ClassType(choices) : "Class Type" : 0 : "Type of class this spawnpoint will be used for." =
	[
		0 : "Soldier"
		1 : "Engineer"
		2 : "Medic"
		3 : "Covert Ops"
		4 : "Commander"
	]
]

//TODO;
//@PointClass base(prop_physics) studioprop() sphere(fademindist) sphere(fademaxdist) = prop_physics_respawnable :
//	"This class is the same as prop_physics, except it respawns after it breaks"
//[
//	RespawnTime(float) : "Respawn Time" : 60 : "Ammount in seconds this prop will respawn after it breaks."
//]

@PointClass base(ClassType, GameType, Angles, Targetname, EnableDisable) studio("models/editor/playerstart.mdl") = info_player_combine :
	"This entity indicates the position and facing direction at which the player will spawn during a deathmatch map. Any number of "+
	"info_player_deathmatch entities may be placed in a map."
[
]

@PointClass base(ClassType, GameType, Angles, Targetname, EnableDisable) studio("models/editor/playerstart.mdl") = info_player_rebel :
	"This entity indicates the position and facing direction at which the player will spawn during a deathmatch map. Any number of "+
	"info_player_deathmatch entities may be placed in a map."
[
]

// 3rd team for cheeky stuff, almost never used in normal games
@PointClass base(ClassType, Angles, Targetname, EnableDisable) studio("models/editor/playerstart.mdl") = info_player_pmc :
	"This entity indicates the position and facing direction at which the player will spawn during a deathmatch map. Any number of "+
	"info_player_deathmatch entities may be placed in a map."
[
]

@FilterClass base(BaseFilter) size(-8 -8 -8, 8 8 8) = filter_activator_team :
	"A filter that filters by the team of the activator."
[
	filterteam(choices) : "Filter Team Number" : 2 : 
		"The team number to filter by.  If the filter mode is Allow, only entities whose "+
		"team number matches the given team will pass the filter. If the filter mode is Disallow, "+
		"all entities EXCEPT those whose team number matches the given team will pass the filter." =
	[
	//	0 : "Unassigned"
		1 : "Spectator"
		2 : "Combine"
		3 : "Rebels"
		4 : "PMC"
	]
]
